#!/bin/sh
#
#      Jonathan Perkin <jonathan@perkin.org.uk> wrote this file.
#
# You can freely distribute/modify it (and are encouraged to do so),
# and you are welcome to buy me a beer if we ever meet and you think
# this stuff is worth it.  Improvements and cleanups always welcome.
#
# etc/sh/functions - bourne shell helper functions.
#


#
# Export a variable pointing to the first occurence of a program from the
# supplied list of options.  Allows programs, shell functions, and aliases.
#
prefprog()
{
    if [ $# -lt 2 ]; then
        echo "prefprog: not enough parameters"
        echo "usage: prefprog <var> <prog> [<prog> ...]"
        return 1
    fi

    key=$1
    shift
    progs=$*

    for prog in ${progs}; do
        if command -v ${prog} >/dev/null 2>&1; then
            eval ${key}="${prog}"
            break
        fi
    done

    if eval test -z \"\${${key}}\"; then
        # Do nothing
        unset key value prog progs
        return 1
    else
        eval export ${key}
        unset key value prog progs
    fi
}

#
# Modify a path variable with the supplied list of pathnames.  If a supplied
# pathname is not a directory, then it is not added.
#
# This is a generic function.  Actual functions should set appropriate
# variables then call _pathtrans with $*.
#
_pathtrans()
{
    if [ $# -lt 2 ]; then
        echo "${progname}: not enough parameters"
        echo "usage: ${progname} <var> <pathname> [<pathname> ...]"
        return 1
    fi

    key=$1
    shift

    # Support both "/bin:/usr/bin" and "/bin /usr/bin syntax.
    paths="`echo $* | sed 's/:/ /g'`"

    if [ -n "${pflag}" ]; then
        paths="`echo $paths | awk '{for(i = NF; i>0; --i) printf("%s ",$i);}'`"
    fi

    if [ -n "${sflag}" ]; then
        eval ${key}=
    fi

    for path in ${paths}; do
        if [ -d ${path} ]; then
            # Use this bit of Bourne shell parameter substitution
            # to avoid a stray ":" in the variable.
            if [ -n "${pflag}" ]; then
                eval ${key}=${path}\${${key}:+:\${${key}}}
            else
                eval ${key}=\${${key}:+\${${key}}:}${path}
            fi
        fi
    done

    eval export ${key}
    unset pflag sflag key path paths prepend progname
}

# Set an initial path variable.
setpath()
{
    progname="setpath"
    sflag=1
    _pathtrans $*
}

# Append a list of pathnames to a path variable.
appendpath()
{
    progname="appendpath"
    _pathtrans $*
}

# Prepend a list of pathnames to a path variable.
prependpath()
{
    progname="prependpath"
    pflag=1
    _pathtrans $*
}

promptcd()
{
    #
    # Under certain circumstances it looks as though this command is
    # expanded to it's promptcd() alias, causing recursion and core
    # dumps.  I've not figured out why yet (only happened on NetBSD
    # sparc64 while trying to run xterms in an X session spawned via
    # startx) so for now disable any expansion of the command.
    #
    \cd $@

    # Basic prompt.  More featureful shells can override this.
    case "${TERM}" in
    xterm*|rxvt|cons25|vt220|linux|dtterm|screen*)
        CYAN="\033[01;36m"
        DCYAN="\033[00;36m"
        BLUE="\033[01;34m"
        RESET="\033[0m"
        ;;
    esac

    _1="${CYAN}-${DCYAN}-${RESET}<"
    _2="${CYAN}${USER:-${LOGNAME}}${DCYAN}@${CYAN}${OS_HOST}"
    _3="${RESET}>${DCYAN}-${RESET}<${BLUE}${PWD}"
    _4="${RESET}>${DCYAN}-${CYAN}-\n"
    TOPLINE="${_1}${_2}${_3}${_4}"

    _5="${DCYAN}-${RESET}>"
    PS1="`print -- ${TOPLINE}${_5}` "

    unset CYAN DCYAN BLUE RESET
    unset _1 _2 _3 _4 _5 TOPLINE
}
